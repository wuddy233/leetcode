class Solution {
    //时间优化
    HashMap<Integer, Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        map = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) {
            //存储在中序数组中的位置
            map.put(inorder[i], i);
        }
        return build(preorder, 0, preorder.length, inorder, 0, inorder.length);
    }

    public TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {
        //左闭右开
        if(preStart >= preEnd || inStart >= inEnd) {
            return null;
        }
        //找到前序遍历数组prestart在中序数组中的位置就是根节点
        int rootIndex = map.get(preorder[preStart]);
        TreeNode root = new TreeNode(inorder[rootIndex]);
        int lenOfLeft = rootIndex - inStart;
        int lenOfRight = inEnd - rootIndex;
        //递归
        root.left = build(preorder, rootIndex + 1, rootIndex + lenOfLeft + 1, inorder, inStart, rootIndex);
        root.right = build(preorder, preStart + 1 + lenOfLeft, preEnd, inorder, rootIndex + 1, inEnd);
        return root;
    }
}
