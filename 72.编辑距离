class Solution {
    public int minDistance(String word1, String word2) {
        //字符数目不一样肯定有插入操作
        //dp[i][j]代表i-1，j-1时所使用最小操作数
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        for(int i = 1; i <= word1.length(); i++) {
            dp[i][0] = i;
        }
        for(int j = 1; j <= word2.length(); j++) {
            dp[0][j] = j;
        }
        for(int i = 1; i <= word1.length(); i++) {
            for(int j = 1; j <= word2.length(); j++) {
                //相等
                if(word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if(word1.charAt(i - 1) != word2.charAt(j - 1)){
                    //word1删除,word2删除，两个替换操作。取最小值
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}
